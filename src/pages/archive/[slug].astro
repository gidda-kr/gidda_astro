---
import ArchiveLayout from '~/layouts/archiveLayout.astro';

export async function getStaticPaths() {
    const STRAPI_URL = 'https://strapi-app-63132904920.asia-northeast3.run.app';

    try {
        const response = await fetch(`${STRAPI_URL}/api/resources?populate[actors][fields][0]=name&populate[attachments][fields][0]=url&populate[attachments][fields][1]=name&populate[archive_collections][fields][0]=title&populate[archive_collections][fields][1]=slug`);
        if (!response.ok) {
            console.error(`API 호출 실패: ${response.status}`);
            return [];
        }
        const data = await response.json();
        const resources = data.data || [];

        // console.log('🔍 API에서 가져온 리소스 개수:', resources.length);
        // console.log('🔍 리소스 documentId 목록:', resources.map(r => r.documentId));

        if (resources.length === 0) {
            console.warn('⚠️ API에서 리소스를 가져오지 못했습니다.');
            return [];
        }

        const staticPaths = resources.map(resource => ({
            params: { slug: String(resource.documentId) },
            props: { resource }
        }));

        // console.log('🔍 최종 생성된 경로 개수:', staticPaths.length);
        // console.log('🔍 생성된 모든 slug:', staticPaths.map(r => r.params.slug));

        return staticPaths;

    } catch (error) {
        console.error("getStaticPaths 함수 실행 중 예외 발생:", error);
        return [];
    }
}

const STRAPI_URL = 'https://strapi-app-63132904920.asia-northeast3.run.app';
const { resource } = Astro.props;

// --- 디버깅 로그 추가 ---
// console.log('--- Astro Props Debug ---');
// console.log('Received resource prop:', resource);
// console.log('-------------------------');

if (!resource) {
    return Astro.redirect('/404');
}

const firstParagraph = resource.summary_content?.[0]?.children?.[0]?.text;
const description = firstParagraph ? firstParagraph.substring(0, 150) + '...' : resource.title;

const attachmentUrl = resource.attachments?.[0]?.url;

const resourceTypeMap = {
    'document': '문서',
    'statement': '성명서',
    'press-release': '보도자료',
    'report': '보고서',
    'photo': '사진',
    'video': '영상',
    'etc': '기타',
};

const translatedResourceType = resourceTypeMap[resource.resource_type] || resource.resource_type;

// 리치 텍스트를 HTML로 변환하는 더 구조적인 함수
function convertRichTextToHTML(richTextArray) {
    if (!richTextArray || !Array.isArray(richTextArray)) {
        return '';
    }

    return richTextArray.map(block => {
        switch (block.type) {
            case 'paragraph': {
                const content = block.children.map(child => parseInlineContent(child)).join('');
                return `<p>${content}</p>`;
            }
            case 'list': {
                const listType = block.format === 'ordered' ? 'ol' : 'ul';
                const listItems = block.children.map(item => {
                    const content = item.children.map(child => parseInlineContent(child)).join('');
                    return `<li>${content}</li>`;
                }).join('');
                return `<${listType}>${listItems}</${listType}>`;
            }
            default:
                return ''; // 정의되지 않은 블록 타입 무시
        }
    }).join('');
}

// 텍스트와 링크를 처리하는 내부 함수
function parseInlineContent(child) {
    // 링크 처리
    if (child.type === 'link') {
        const linkText = child.children.map(linkChild => parseInlineContent(linkChild)).join('') || '링크';
        return `<a href="${child.url}" target="_blank" rel="noopener noreferrer">${linkText}</a>`;
    }
    // 일반 텍스트 및 서식 적용
    else if (child.text) {
        let text = child.text;
        if (child.bold) text = `<strong>${text}</strong>`;
        if (child.italic) text = `<em>${text}</em>`;
        if (child.underline) text = `<u>${text}</u>`;
        if (child.strikethrough) text = `<s>${text}</s>`;
        return text;
    }
    return '';
}

const fullContent = convertRichTextToHTML(resource.summary_content);

// 버튼 로직
let finalUrl = null;
let buttonText = '링크 없음';

// 원문 URL의 유효성을 먼저 검사합니다.
import { Agent } from 'undici';

// SSL 인증서 오류를 무시하는 Agent를 생성합니다.
const sslAgent = new Agent({
    connect: {
        rejectUnauthorized: false
    }
});

let isSourceBroken = false;
if (resource.source_url) {
    try {
        // 첫 번째 시도: HEAD 요청
        const headResponse = await fetch(resource.source_url, {
            method: 'HEAD',
            timeout: 5000,
            dispatcher: sslAgent
        });
        isSourceBroken = !headResponse.ok;

        // HEAD 요청이 실패하면 GET 요청으로 재시도
        if (isSourceBroken) {
            console.log('HEAD 요청 실패. GET 요청으로 재시도합니다.');
            const getResponse = await fetch(resource.source_url, {
                method: 'GET',
                timeout: 5000,
                dispatcher: sslAgent
            });
            isSourceBroken = !getResponse.ok;
        }

    } catch (e) {
        // 네트워크 오류 등 예외가 발생하면 GET 요청으로 재시도
        console.log('네트워크 오류 발생. GET 요청으로 재시도합니다.');
        try {
            const getResponse = await fetch(resource.source_url, {
                method: 'GET',
                timeout: 5000,
                dispatcher: sslAgent
            });
            isSourceBroken = !getResponse.ok;
        } catch (e) {
            // GET 요청까지 실패하면 유효하지 않은 것으로 간주
            console.error('GET 요청까지 실패했습니다.', e);
            isSourceBroken = true;
        }
    }
}
// --- 디버깅 로그 추가 ---
// console.log('Final URL:', finalUrl, 'Button Text:', buttonText);
// -------------------------


// 1. 원문 URL이 있고 유효한 경우, 원문 페이지로 이동
if (resource.source_url && !isSourceBroken) {
    finalUrl = resource.source_url;
    buttonText = '원문 페이지로 이동';
}
// 2. 원문 URL이 없거나 깨졌고, 첨부파일이 있는 경우, 자료 다운로드
else if (attachmentUrl) {
    finalUrl = attachmentUrl;
    buttonText = '자료 다운로드';
    // 저작권 상태가 KOGL 또는 copyrighted이면서 백업 링크인 경우
    if (resource.copyright_status === 'KOGL' || resource.copyright_status === 'copyrighted') {
        buttonText += ' (백업)';
    }
}
// 3. 둘 다 없는 경우
else {
    finalUrl = null;
    buttonText = '링크 없음';
}
---

<ArchiveLayout title={resource.title} description={description}>
    <div class="archive-main-content">
        <header class="resource-header">
            <h1 class="resource-title">{resource.title}</h1>
            <p class="resource-date">원본작성일: {resource.date}</p>
        </header>

        <aside class="metadata-sidebar">
            <div class="metadata-item">
                <strong>자료 유형</strong>
                <span>{translatedResourceType}</span>
            </div>
            {resource.actors?.length > 0 && (
                    <div class="metadata-item">
                        <strong>작성자/제공기관</strong>
                        <span>
                        {resource.actors.map(actor => actor.name).join(', ')}
                    </span>
                    </div>
            )}
            <div class="metadata-item">
                <strong>저작권 상태</strong>
                <span>{resource.copyright_status}</span>
            </div>
            {resource.copyright_specific && (
                    <div class="metadata-item">
                        <strong>세부 라이선스</strong>
                        <span>{resource.copyright_specific}</span>
                    </div>
            )}

            {resource.archive_collections?.length > 0 && (
                    <div class="metadata-item related-collections">
                        <strong>관련 아카이브 컬렉션</strong>
                        <ul>
                            {resource.archive_collections.map(collection => (
                                    <li>
                                        <a href={`/archive/collection/${collection.slug}`}>
                                            {collection.title}
                                        </a>
                                    </li>
                            ))}
                        </ul>
                    </div>
            )}
            <div class="action-buttons">
                {finalUrl ? (
                        <a href={finalUrl} class="button-primary" target="_blank" rel="noopener noreferrer">{buttonText}</a>
                ) : (
                        <span class="no-link-message">링크가 존재하지 않습니다.</span>
                )}
            </div>
        </aside>

        <main class="resource-body">
            <div class="content-text-block">
                <div set:html={fullContent}></div>
            </div>
        </main>
    </div>
</ArchiveLayout>

<style>
    .archive-main-content {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
        max-width: 800px;
        margin: 0 auto;
        padding: 0 1rem;
        /* 모바일: 헤더 → 사이드바 → 본문 순서 */
        grid-template-areas:
            "header"
            "sidebar"
            "body";
    }

    .resource-header {
        grid-area: header;
        margin-top: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .resource-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
        line-height: 1.3;
    }

    .resource-date {
        font-size: 0.9rem;
        color: #666;
        margin: 0;
    }

    .resource-body {
        grid-area: body;
    }

    .metadata-sidebar {
        grid-area: sidebar;
    }

    .metadata-item {
        margin-bottom: 1rem;
    }

    .related-collections ul {
        list-style-type: none;
        padding-left: 0;
        margin-top: 0.5rem;
    }

    .related-collections li {
        margin-bottom: 0.25rem;
    }

    .related-collections a {
        display: block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        background-color: #f5f5f5;
        color: #1a1a1a;
        text-decoration: none;
        transition: background-color 0.2s ease;
    }

    .related-collections a:hover {
        background-color: #e0e0e0;
    }


    .metadata-item strong {
        display: block;
        font-size: 0.9rem;
        color: #444;
        margin-bottom: 0.25rem;
    }

    .metadata-item span {
        font-size: 1rem;
        font-weight: 600;
        color: #1a1a1a;
    }

    .action-buttons {
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #f0f0f0;
    }

    .button-primary {
        display: block;
        padding: 0.75rem 1.5rem;
        background-color: #355E3B;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: 600;
        text-align: center;
        width: 100%;
        box-sizing: border-box;
        transition: background-color 0.2s ease;
    }

    .button-primary:hover {
        background-color: #2a4a2f;
    }

    .content-text-block {
        line-height: 1.7;
    }

    .content-text-block p {
        margin-bottom: 1rem;
    }

    /* 본문 내 링크 스타일링 */
    .content-text-block a {
        color: #355E3B;
        text-decoration: underline;
        font-weight: 500;
        transition: color 0.2s ease;
    }

    .content-text-block a:hover {
        color: #2a4a2f;
        text-decoration-thickness: 2px;
    }

    .no-link-message {
        color: #888;
        font-style: italic;
        font-size: 0.9rem;
        display: block;
        text-align: center;
        padding: 0.75rem;
    }

    /* 데스크톱: 2컬럼 레이아웃 */
    @media (min-width: 768px) {
        .archive-main-content {
            grid-template-columns: 2fr 1fr !important;
            grid-template-areas:
                "header header"
                "body sidebar" !important;
            gap: 2rem;
            max-width: 800px;
        }

        .metadata-sidebar {
            border-left: 1px solid #e0e0e0 !important;
            padding-left: 2rem !important;
            position: sticky !important;
            top: 2rem;
            height: fit-content;
            border-bottom: none !important;
            margin-bottom: 0 !important;
            padding-bottom: 0 !important;
        }
    }

    /* 모바일 반응형 - 명시적으로 순서 재정의 */
    @media (max-width: 767px) {
        .archive-main-content {
            grid-template-areas:
                "header"
                "sidebar"
                "body" !important;
            padding: 0 1rem;
        }

        .resource-title {
            font-size: 1.5rem;
        }

        .metadata-sidebar {
            border-left: none !important;
            padding-left: 0 !important;
            position: static !important;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 1.5rem;
            margin-bottom: 1rem;
        }
    }
</style>
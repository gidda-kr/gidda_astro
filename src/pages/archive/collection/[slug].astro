---
import ArchiveLayout from '~/layouts/archiveLayout.astro';
import type { APIContext } from 'astro';

// Strapi에서 아카이브 커뮤니티 데이터를 가져와서 정적 경로를 생성합니다.
export async function getStaticPaths() {
    const STRAPI_URL = 'https://strapi-app-63132904920.asia-northeast3.run.app';
    // populate 쿼리: resources의 title, date, resource_type, documentId, 그리고 actors의 name을 가져옵니다.
    const optimizedQuery = '?populate[resources][fields][0]=title&populate[resources][fields][1]=date&populate[resources][fields][2]=resource_type&populate[resources][fields][3]=documentId&populate[resources][populate][actors][fields][0]=name';

    try {
        console.log('--- getStaticPaths Debug Start ---');
        console.log(`1. API 호출 시작: ${STRAPI_URL}/api/archive-collections${optimizedQuery}`);

        const response = await fetch(`${STRAPI_URL}/api/archive-collections${optimizedQuery}`);

        console.log('2. API 응답 상태 (response.ok):', response.ok, 'Status:', response.status);
        if (!response.ok) {
            console.error(`API 호출 실패: ${response.status} - ${response.statusText}`);
            return [];
        }
        const rawData = await response.json();
        console.log('3. Raw API 데이터 수신:', JSON.stringify(rawData, null, 2)); // 전체 raw 데이터 로깅

        // 최상위 'data' 배열에서 컬렉션 추출
        const collections = rawData.data || [];
        console.log('4. 추출된 컬렉션 배열 길이:', collections.length);

        if (collections.length === 0) {
            console.warn('⚠️ API에서 컬렉션을 가져오지 못했습니다. collections 배열이 비어 있습니다.');
            return [];
        }

        const staticPaths = collections.map(collection => {
            // 각 collection 객체 로깅 (attributes 없이 바로 필드 접근)
            console.log('5. 처리 중인 collection 객체:', JSON.stringify(collection, null, 2));

            // collection 객체는 attributes 없이 slug를 직접 가집니다.
            if (!collection.slug) {
                console.error('오류: collection.slug가 정의되지 않았습니다. collection:', JSON.stringify(collection, null, 2));
                return null; // 유효하지 않은 경로는 건너뜁니다.
            }

            const slug = String(collection.slug);
            // props로 collection 객체 전체를 전달합니다.
            const props = { collection: collection };

            console.log(`6. 생성된 경로: /archive/collection/${slug}, Props:`, JSON.stringify(props, null, 2));
            return {
                params: { slug: slug },
                props: props
            };
        }).filter(Boolean); // null 값 필터링

        console.log('7. 최종 생성된 staticPaths 개수:', staticPaths.length);
        console.log('8. 생성된 모든 slug:', staticPaths.map(p => p.params.slug));
        console.log('--- getStaticPaths Debug End ---');

        return staticPaths;

    } catch (error) {
        console.error("getStaticPaths 함수 실행 중 예외 발생:", error);
        return [];
    }
}

const { collection } = Astro.props;

if (!collection) {
    return Astro.redirect('/404');
}

// 리치 텍스트를 HTML로 변환하는 함수 (기존 함수 재사용)
function convertRichTextToHTML(richTextArray) {
    if (!richTextArray || !Array.isArray(richTextArray)) {
        return '';
    }

    return richTextArray.map(block => {
        switch (block.type) {
            case 'paragraph': {
                const content = block.children.map(child => parseInlineContent(child)).join('');
                return `<p>${content}</p>`;
            }
            case 'list': {
                const listType = block.format === 'ordered' ? 'ol' : 'ul';
                const listItems = block.children.map(item => {
                    const content = item.children.map(child => parseInlineContent(child)).join('');
                    return `<li>${content}</li>`;
                }).join('');
                return `<${listType}>${listItems}</${listType}>`;
            }
            default:
                return '';
        }
    }).join('');
}

function parseInlineContent(child) {
    if (child.type === 'link') {
        const linkText = child.children.map(linkChild => parseInlineContent(linkChild)).join('') || '링크';
        return `<a href="${child.url}" target="_blank" rel="noopener noreferrer">${linkText}</a>`;
    }
    else if (child.text) {
        let text = child.text;
        if (child.bold) text = `<strong>${text}</strong>`;
        if (child.italic) text = `<em>${text}</em>`;
        if (child.underline) text = `<u>${text}</u>`;
        if (child.strikethrough) text = `<s>${text}</s>`;
        return text;
    }
    return '';
}

// 제공해주신 리소스 타입 사전
const resourceTypeMap = {
    'document': '문서',
    'statement': '성명서',
    'press-release': '보도자료',
    'report': '보고서',
    'photo': '사진',
    'video': '영상',
    'etc': '기타',
};

const collectionDescription = convertRichTextToHTML(collection.description);

// resources 배열을 날짜(date) 기준으로 내림차순 정렬 (최신순)
// collection.resources는 이미 배열 형태이므로 .data를 붙이지 않습니다.
const sortedResources = collection.resources.sort((a, b) => {
    // resource 객체는 attributes 없이 date를 직접 가집니다.
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    return dateB.getTime() - dateA.getTime();
});

const pageTitle = `${collection.title} - 자료모음`;
const pageDescription = collection.description?.[0]?.children?.[0]?.text || collection.title;
---

<ArchiveLayout title={pageTitle} description={pageDescription}>
    <div class="collection-page-content">
        <header class="collection-header">
            <h1 class="collection-title">{collection.title}</h1>
            <div class="collection-description" set:html={collectionDescription}></div>
        </header>

        <main class="collection-resources">
            <h2 class="resources-heading">자료 목록</h2>
            <ul class="resource-list">
                {sortedResources.map(resource => {
                    // resource 객체는 attributes 없이 필드를 직접 가집니다.
                    const { title, date, resource_type, documentId, actors } = resource;
                    const translatedResourceType = resourceTypeMap[resource_type] || resource_type;
                    // actors 배열의 각 actor 객체도 attributes 없이 name을 직접 가집니다.
                    const actorNames = actors?.map(actor => actor.name).join(', ') || '작성자 불명';

                    return (
                            <li>
                                <a href={`/archive/${documentId}`} class="resource-item">
                                <span class="resource-metadata">
                                    <span class="resource-date">{date}</span>
                                    <span class="resource-separator">|</span>
                                    <span class="resource-type">{translatedResourceType}</span>
                                    <span class="resource-separator">|</span>
                                    <span class="resource-actors">{actorNames}</span>
                                </span>
                                    <h3 class="resource-title">{title}</h3>
                                </a>
                            </li>
                    )
                })}
            </ul>
        </main>
    </div>
</ArchiveLayout>

<style>
    .collection-page-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .collection-header {
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 1.5rem;
        margin-bottom: 2rem;
    }

    .collection-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0 0 1rem 0;
    }

    .collection-description p {
        line-height: 1.7;
        margin-bottom: 1rem;
        color: #4a4a4a;
    }

    .resources-heading {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #333;
    }

    .resource-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .resource-item {
        display: block;
        padding: 1.25rem 1.5rem;
        background-color: #f9f9f9;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 1rem;
        text-decoration: none;
        color: inherit;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .resource-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .resource-item .resource-metadata {
        display: block;
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 0.5rem;
    }

    .resource-metadata .resource-separator {
        color: #ccc;
        margin: 0 0.5rem;
    }

    .resource-item .resource-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin: 0;
        line-height: 1.4;
    }

    @media (max-width: 768px) {
        .collection-title {
            font-size: 2rem;
        }

        .resource-item {
            padding: 1rem;
        }
    }
</style>
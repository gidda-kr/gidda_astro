---
import BaseLayout from '../../layouts/BaseLayout.astro';

// 1. Astro 빌드 시점에 Strapi API에서 모든 웹진 기사 목록을 가져옵니다.
//    제목, 슬러그, 발행일, 작성자 정보, 그리고 featuredImage가 필요합니다.
const strapiUrl = 'https://strapi-app-63132904920.asia-northeast3.run.app';
const apiPath = '/api/webzine-articles';

// queryParams: 원래 잘 작동하던 쿼리 + featuredImage 추가
const queryParams = '?populate[author][fields]=name&populate=featuredImage&sort=publishedat:desc&fields[0]=title&fields[1]=slug&fields[2]=publishedat';

let articles = [];
try {
    console.log('API 호출:', `${strapiUrl}${apiPath}${queryParams}`);
    const response = await fetch(`${strapiUrl}${apiPath}${queryParams}`);
    console.log('Response status:', response.status);

    const jsonData = await response.json();
    console.log('API Response:', jsonData);

    if (jsonData.data) {
        articles = jsonData.data.map(item => {
            const articleData = item;
            // author 객체에서 name을 바로 가져옵니다.
            const authorName = articleData.author?.name || '작성자 정보 없음';

            // featuredImage 처리 - API 응답 구조에 맞게 수정
            const featuredImage = articleData.featuredImage ? {
                url: articleData.featuredImage.url,
                alt: articleData.featuredImage.alternativeText || articleData.featuredImage.name || articleData.title || 'Featured Image'
            } : null;

            return {
                ...articleData,
                authorName: authorName,
                featuredImage: featuredImage
            };
        });
    }
    console.log('Processed articles:', articles.length);
} catch (error) {
    console.error('Strapi API에서 웹진 기사 목록을 가져오는 데 실패했습니다:', error);
}
---

<BaseLayout title="웹진 목록">
    <article class="webzine-list-container">
        <header class="page-header">
            <h1>웹진</h1>
            <p class="article-count">총 {articles.length}개의 기사</p>
        </header>

        {articles.length === 0 ? (
                <div class="empty-state">
                    <p>아직 작성된 웹진 기사가 없습니다.</p>
                    <p>Strapi에서 첫 번째 글을 작성해 보세요!</p>
                </div>
        ) : (
                <div class="masonry-grid">
                    {articles.map((article) => (
                            <article class="card">
                                <a href={`/webzine/${article.slug}`} class="card-link">
                                    {article.featuredImage && (
                                            <div class="card-image">
                                                <img
                                                        src={article.featuredImage.url}
                                                        alt={article.featuredImage.alt}
                                                        loading="lazy"
                                                />
                                            </div>
                                    )}
                                    <div class="card-content">
                                        <div class="article-meta">
                                            <span class="author">{article.authorName}</span>
                                            <span class="separator">•</span>
                                            <span class="date">
                                                {new Date(article.publishedat).toLocaleDateString('ko-KR', {
                                                    year: 'numeric',
                                                    month: 'long',
                                                    day: 'numeric'
                                                })}
                                            </span>
                                        </div>
                                        <h2 class="card-title">{article.title}</h2>
                                    </div>
                                </a>
                            </article>
                    ))}
                </div>
        )}
    </article>
</BaseLayout>

<style>
    .webzine-list-container {
        max-width: 1400px;
        margin: 2rem auto;
        padding: 1rem 2rem;
        font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid #e8e8e8;
    }

    .page-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1a1a1a;
        margin-bottom: 1rem;
        letter-spacing: -0.02em;
    }

    .article-count {
        font-size: 1.1rem;
        color: #666;
        margin: 0;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #666;
        font-size: 1.1rem;
        line-height: 1.6;
    }

    /* 핀터레스트 스타일 매소너리 그리드 */
    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .card {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid rgba(0, 0, 0, 0.05);
        break-inside: avoid;
    }

    .card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }

    .card-link {
        display: block;
        text-decoration: none;
        color: inherit;
        height: 100%;
    }

    .card-image {
        width: 100%;
        aspect-ratio: 1;
        overflow: hidden;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        position: relative;
    }

    .card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .card:hover .card-image img {
        transform: scale(1.05);
    }

    .card-content {
        padding: 1.5rem;
    }

    .article-meta {
        font-size: 0.875rem;
        color: #888;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .article-meta .author {
        color: #355E3B;
        font-weight: 500;
    }

    .article-meta .separator {
        color: #ccc;
    }

    .article-meta .date {
        color: #666;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        line-height: 1.4;
        color: #1a1a1a;
        margin: 0;
        letter-spacing: -0.01em;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        word-break: keep-all;
    }

    /* 이미지가 없는 카드를 위한 특별 스타일 */
    .card:not(:has(.card-image)) {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .card:not(:has(.card-image)) .card-content {
        padding: 2rem 1.5rem;
    }

    .card:not(:has(.card-image)) .article-meta .author {
        color: rgba(255, 255, 255, 0.9);
    }

    .card:not(:has(.card-image)) .article-meta .date {
        color: rgba(255, 255, 255, 0.8);
    }

    .card:not(:has(.card-image)) .card-title {
        color: white;
    }

    /* 반응형 디자인 */
    @media (max-width: 768px) {
        .webzine-list-container {
            padding: 1rem;
            margin: 1rem auto;
        }

        .page-header {
            margin-bottom: 2rem;
        }

        .page-header h1 {
            font-size: 2rem;
        }

        .masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
        }

        .card-content {
            padding: 1.25rem;
        }

        .card-title {
            font-size: 1.125rem;
        }
    }

    @media (max-width: 480px) {
        .masonry-grid {
            grid-template-columns: 1fr;
        }

        .page-header h1 {
            font-size: 1.75rem;
        }

        .card-content {
            padding: 1rem;
        }
    }

    /* 매소너리 레이아웃을 위한 추가 스타일 */
    @supports (grid-template-rows: masonry) {
        .masonry-grid {
            grid-template-rows: masonry;
        }
    }

    /* 카드 높이 랜덤화를 위한 nth-child 스타일 */
    .card:nth-child(3n+1) .card-content {
        padding-bottom: 2rem;
    }

    .card:nth-child(5n+2) .card-content {
        padding-bottom: 2.5rem;
    }

    .card:nth-child(7n+3) .card-content {
        padding-bottom: 1.75rem;
    }
</style>